// Code generated by MockGen. DO NOT EDIT.
// Source: veterinary-employee/services (interfaces: IS3Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	multipart "mime/multipart"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIS3Service is a mock of IS3Service interface.
type MockIS3Service struct {
	ctrl     *gomock.Controller
	recorder *MockIS3ServiceMockRecorder
}

// MockIS3ServiceMockRecorder is the mock recorder for MockIS3Service.
type MockIS3ServiceMockRecorder struct {
	mock *MockIS3Service
}

// NewMockIS3Service creates a new mock instance.
func NewMockIS3Service(ctrl *gomock.Controller) *MockIS3Service {
	mock := &MockIS3Service{ctrl: ctrl}
	mock.recorder = &MockIS3ServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIS3Service) EXPECT() *MockIS3ServiceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockIS3Service) DeleteFile(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockIS3ServiceMockRecorder) DeleteFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockIS3Service)(nil).DeleteFile), arg0)
}

// UploadFile mocks base method.
func (m *MockIS3Service) UploadFile(arg0, arg1 string, arg2 multipart.File) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadFile indicates an expected call of UploadFile.
func (mr *MockIS3ServiceMockRecorder) UploadFile(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFile", reflect.TypeOf((*MockIS3Service)(nil).UploadFile), arg0, arg1, arg2)
}
