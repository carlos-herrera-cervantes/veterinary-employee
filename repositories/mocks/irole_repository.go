// Code generated by MockGen. DO NOT EDIT.
// Source: veterinary-employee/repositories (interfaces: IRoleRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "veterinary-employee/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIRoleRepository is a mock of IRoleRepository interface.
type MockIRoleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRoleRepositoryMockRecorder
}

// MockIRoleRepositoryMockRecorder is the mock recorder for MockIRoleRepository.
type MockIRoleRepositoryMockRecorder struct {
	mock *MockIRoleRepository
}

// NewMockIRoleRepository creates a new mock instance.
func NewMockIRoleRepository(ctrl *gomock.Controller) *MockIRoleRepository {
	mock := &MockIRoleRepository{ctrl: ctrl}
	mock.recorder = &MockIRoleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoleRepository) EXPECT() *MockIRoleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRoleRepository) Create(arg0 context.Context, arg1 models.Role) (models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRoleRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRoleRepository)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockIRoleRepository) Get(arg0 context.Context, arg1 interface{}) (models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRoleRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRoleRepository)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockIRoleRepository) GetAll(arg0 context.Context) ([]models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0)
	ret0, _ := ret[0].([]models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockIRoleRepositoryMockRecorder) GetAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockIRoleRepository)(nil).GetAll), arg0)
}

// Update mocks base method.
func (m *MockIRoleRepository) Update(arg0 context.Context, arg1, arg2 interface{}) (models.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIRoleRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIRoleRepository)(nil).Update), arg0, arg1, arg2)
}
