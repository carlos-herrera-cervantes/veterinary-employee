// Code generated by MockGen. DO NOT EDIT.
// Source: veterinary-employee/repositories (interfaces: ICatalogPositionsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "veterinary-employee/models"

	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockICatalogPositionsRepository is a mock of ICatalogPositionsRepository interface.
type MockICatalogPositionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICatalogPositionsRepositoryMockRecorder
}

// MockICatalogPositionsRepositoryMockRecorder is the mock recorder for MockICatalogPositionsRepository.
type MockICatalogPositionsRepositoryMockRecorder struct {
	mock *MockICatalogPositionsRepository
}

// NewMockICatalogPositionsRepository creates a new mock instance.
func NewMockICatalogPositionsRepository(ctrl *gomock.Controller) *MockICatalogPositionsRepository {
	mock := &MockICatalogPositionsRepository{ctrl: ctrl}
	mock.recorder = &MockICatalogPositionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICatalogPositionsRepository) EXPECT() *MockICatalogPositionsRepositoryMockRecorder {
	return m.recorder
}

// CountDocuments mocks base method.
func (m *MockICatalogPositionsRepository) CountDocuments(arg0 context.Context, arg1 primitive.M) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDocuments", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockICatalogPositionsRepositoryMockRecorder) CountDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockICatalogPositionsRepository)(nil).CountDocuments), arg0, arg1)
}

// Create mocks base method.
func (m *MockICatalogPositionsRepository) Create(arg0 context.Context, arg1 models.CatalogPosition) (models.CatalogPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.CatalogPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockICatalogPositionsRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockICatalogPositionsRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockICatalogPositionsRepository) Delete(arg0 context.Context, arg1 primitive.M) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockICatalogPositionsRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockICatalogPositionsRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockICatalogPositionsRepository) Get(arg0 context.Context, arg1 primitive.M) (models.CatalogPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.CatalogPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICatalogPositionsRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICatalogPositionsRepository)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockICatalogPositionsRepository) GetAll(arg0 context.Context, arg1, arg2 int64) ([]models.CatalogPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.CatalogPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockICatalogPositionsRepositoryMockRecorder) GetAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockICatalogPositionsRepository)(nil).GetAll), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockICatalogPositionsRepository) Update(arg0 context.Context, arg1 primitive.M, arg2 models.PartialCatalogPosition) (models.CatalogPosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.CatalogPosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockICatalogPositionsRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockICatalogPositionsRepository)(nil).Update), arg0, arg1, arg2)
}
