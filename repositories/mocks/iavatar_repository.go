// Code generated by MockGen. DO NOT EDIT.
// Source: veterinary-employee/repositories (interfaces: IAvatarRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	models "veterinary-employee/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIAvatarRepository is a mock of IAvatarRepository interface.
type MockIAvatarRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAvatarRepositoryMockRecorder
}

// MockIAvatarRepositoryMockRecorder is the mock recorder for MockIAvatarRepository.
type MockIAvatarRepositoryMockRecorder struct {
	mock *MockIAvatarRepository
}

// NewMockIAvatarRepository creates a new mock instance.
func NewMockIAvatarRepository(ctrl *gomock.Controller) *MockIAvatarRepository {
	mock := &MockIAvatarRepository{ctrl: ctrl}
	mock.recorder = &MockIAvatarRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAvatarRepository) EXPECT() *MockIAvatarRepositoryMockRecorder {
	return m.recorder
}

// CountDocuments mocks base method.
func (m *MockIAvatarRepository) CountDocuments(arg0 context.Context, arg1 interface{}) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDocuments", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockIAvatarRepositoryMockRecorder) CountDocuments(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockIAvatarRepository)(nil).CountDocuments), arg0, arg1)
}

// Create mocks base method.
func (m *MockIAvatarRepository) Create(arg0 context.Context, arg1 models.Avatar) (models.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(models.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIAvatarRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAvatarRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockIAvatarRepository) Delete(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIAvatarRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIAvatarRepository)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockIAvatarRepository) Get(arg0 context.Context, arg1 interface{}) (models.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(models.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIAvatarRepositoryMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAvatarRepository)(nil).Get), arg0, arg1)
}

// Update mocks base method.
func (m *MockIAvatarRepository) Update(arg0 context.Context, arg1, arg2 interface{}) (models.Avatar, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.Avatar)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIAvatarRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIAvatarRepository)(nil).Update), arg0, arg1, arg2)
}
